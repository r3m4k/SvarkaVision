import multiprocessing as mp
from multiprocessing import Queue, Process
import time
from typing import Any, Callable, Optional, Dict
from dataclasses import dataclass
from enum import Enum


class MessageType(Enum):
    COMMAND = "command"
    RESULT = "result"
    LOG = "log"


@dataclass
class Message:
    type: MessageType
    payload: Any = None
    timestamp: float = None

    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = time.time()


class AsyncMethodExecutor:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–µ—Ç–æ–¥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π callback'–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
    """

    def __init__(self, target_object: Any, method_name: str):
        self.target_object = target_object
        self.method_name = method_name
        self.method = getattr(target_object, method_name)

        self.process: Optional[Process] = None
        self.command_queue = Queue()
        self.result_queue = Queue()

        self.callbacks = {
            'on_start': None,
            'on_result': None,
            'on_error': None,
            'on_finish': None
        }

    def set_callback(self, event: str, callback: Callable):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback'–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
        if event in self.callbacks:
            self.callbacks[event] = callback

    def _run_method(self, *args, **kwargs):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥, –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        # Callback –∑–∞–ø—É—Å–∫–∞
        if self.callbacks['on_start']:
            self.result_queue.put(Message(MessageType.LOG, "–ú–µ—Ç–æ–¥ –∑–∞–ø—É—â–µ–Ω"))

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç–æ–¥
            result = self.method(*args, **kwargs)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.result_queue.put(Message(MessageType.RESULT, result))

            # Callback —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if self.callbacks['on_finish']:
                self.result_queue.put(Message(MessageType.LOG, "–ú–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"))

        except Exception as e:
            # Callback –æ—à–∏–±–∫–∏
            error_msg = f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ {self.method_name}: {str(e)}"
            self.result_queue.put(Message(MessageType.ERROR, error_msg))

    def start(self, *args, **kwargs) -> bool:
        """–ó–∞–ø—É—Å–∫ –º–µ—Ç–æ–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        if self.process and self.process.is_alive():
            return False

        self.process = Process(
            target=self._run_method,
            args=args,
            kwargs=kwargs,
            daemon=True
        )
        self.process.start()
        return True

    def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if not self.process or not self.process.is_alive():
            return False

        self.process.terminate()
        self.process.join(timeout=5)
        return True

    def get_results(self) -> list[Message]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        results = []
        while not self.result_queue.empty():
            try:
                message = self.result_queue.get_nowait()
                results.append(message)

                # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ callback'–∏
                if message.type == MessageType.RESULT and self.callbacks['on_result']:
                    self.callbacks['on_result'](message.payload)
                elif message.type == MessageType.ERROR and self.callbacks['on_error']:
                    self.callbacks['on_error'](message.payload)

            except:
                break
        return results

    def is_running(self) -> bool:
        return self.process and self.process.is_alive()


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å callback'–∞–º–∏
class DataAnalyzer:
    def __init__(self, name: str):
        self.name = name

    def analyze(self, data: list) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞"""
        time.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –¥–æ–ª–≥–æ–π —Ä–∞–±–æ—Ç—ã

        return {
            'analyzer': self.name,
            'data_length': len(data),
            'sum': sum(data) if all(isinstance(x, (int, float)) for x in data) else None,
            'average': sum(data) / len(data) if data else 0
        }


def on_result(result):
    print(f"üìä –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {result}")


def on_error(error):
    print(f"‚ùå –û—à–∏–±–∫–∞: {error}")


def on_start():
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")


def example_usage():
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    analyzer = DataAnalyzer("StatisticalAnalyzer")

    # –°–æ–∑–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    executor = AsyncMethodExecutor(analyzer, "analyze")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback'–∏
    executor.set_callback('on_result', on_result)
    executor.set_callback('on_error', on_error)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    test_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    executor.start(test_data)

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    while executor.is_running():
        executor.get_results()  # –í—ã–∑–æ–≤–µ—Ç callback'–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        time.sleep(0.1)

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    final_results = executor.get_results()
    for msg in final_results:
        print(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg}")


if __name__ == "__main__":
    example_usage()